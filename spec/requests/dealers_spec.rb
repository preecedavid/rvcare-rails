# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/dealers', type: :request do
  # Dealer. As you add validations to Dealer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      dealer = Dealer.create! valid_attributes
      get edit_dealer_url(dealer)
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested dealer' do
        dealer = Dealer.create! valid_attributes
        patch dealer_url(dealer), params: { dealer: new_attributes }
        dealer.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the dealer' do
        dealer = Dealer.create! valid_attributes
        patch dealer_url(dealer), params: { dealer: new_attributes }
        dealer.reload
        expect(response).to redirect_to(dealer_url(dealer))
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        dealer = Dealer.create! valid_attributes
        patch dealer_url(dealer), params: { dealer: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
end
